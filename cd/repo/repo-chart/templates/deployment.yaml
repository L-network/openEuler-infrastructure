# Persistent volume claim for deployment
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-data-volume
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.storage.size }}
  storageClassName: {{ .Values.storage.className }}

# ServiceAccount for deployment
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-listener
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-listener
rules:
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-listener
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-listener
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-listener
  apiGroup: rbac.authorization.k8s.io


# Deployment for repo service
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: repo-nginx-server
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: repo-nginx-pod
  template:
    metadata:
      labels:
        app: repo-nginx-pod
    spec:
      serviceAccount: {{ .Release.Name }}-listener
      initContainers:
        - name: repo-prepare-tool
          image: {{ .Values.deployment.initImage }}
          env:
            # key and cert file used for nginx tls
            - name: KEY_FILE
              value: {{ .Values.deployment.keyFile }}
            - name: CERT_FILE
              value: {{ .Values.deployment.certFile }}
          args: ["--key-file", "$(KEY_FILE)","--cert-file", "$(CERT_FILE)", "prepare"]
          volumeMounts:
            - mountPath: /etc/nginx/ssl
              name: repo-nginx-tls-volume
      containers:
        - name: repo-nginx
          image: {{ .Values.deployment.image }}
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - mountPath: /etc/nginx/ssl
              name: repo-nginx-tls-volume
            - mountPath: /etc/nginx/nginx.conf
              name: repo-nginx-configmap-volume
              subPath: nginx.conf
            - mountPath: /etc/nginx/conf.d/default.conf
              name: repo-nginx-configmap-volume
              subPath: default.conf
            - mountPath: /repo/openeuler
              name: repo-data-volume
        - name: repo-update-listener
          image: {{ .Values.deployment.listenerImage }}
          env:
              # base auth for repo listener
            - name: BASIC_AUTH_USERNAME
              value: {{ .Values.deployment.listenerUsername }}
            - name: BASIC_AUTH_PASSWORD
              value: {{ .Values.deployment.listenerPassword }}
            - name: K8S_NAMESPACE
              value: {{ .Release.Namespace }}
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - mountPath: /etc/repo-update/update-repo-job.yaml
              name: repo-nginx-configmap-volume
              subPath: update-repo-job.yaml
      volumes:
        - name: repo-nginx-tls-volume
          emptyDir: {}
        - name: repo-nginx-configmap-volume
          configMap:
            name: {{ .Release.Name }}-configmap
        - name: repo-data-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data-volume
